/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SelfImport } from './routes/_self'
import { Route as DocsImport } from './routes/_docs'
import { Route as DashboardImport } from './routes/_dashboard'
import { Route as AppsImport } from './routes/_apps'
import { Route as SelfselfIndexImport } from './routes/_self/(self)/index'
import { Route as DocsDocsIndexImport } from './routes/_docs/docs/index'
import { Route as DashboardDashboardIndexImport } from './routes/_dashboard/dashboard/index'
import { Route as AppsAppsIndexImport } from './routes/_apps/apps/index'
import { Route as SelfselfTermsImport } from './routes/_self/(self)/terms'
import { Route as SelfselfTasksImport } from './routes/_self/(self)/tasks'
import { Route as SelfselfSignInImport } from './routes/_self/(self)/sign-in'
import { Route as SelfselfSettingsImport } from './routes/_self/(self)/settings'
import { Route as SelfselfRegisterImport } from './routes/_self/(self)/register'
import { Route as SelfselfProjectsImport } from './routes/_self/(self)/projects'
import { Route as SelfselfPrivacyImport } from './routes/_self/(self)/privacy'
import { Route as DocsDocsLangIndexImport } from './routes/_docs/docs/$lang/index'

// Create/Update Routes

const SelfRoute = SelfImport.update({
  id: '/_self',
  getParentRoute: () => rootRoute,
} as any)

const DocsRoute = DocsImport.update({
  id: '/_docs',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AppsRoute = AppsImport.update({
  id: '/_apps',
  getParentRoute: () => rootRoute,
} as any)

const SelfselfIndexRoute = SelfselfIndexImport.update({
  id: '/(self)/',
  path: '/',
  getParentRoute: () => SelfRoute,
} as any)

const DocsDocsIndexRoute = DocsDocsIndexImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => DocsRoute,
} as any)

const DashboardDashboardIndexRoute = DashboardDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => DashboardRoute,
} as any)

const AppsAppsIndexRoute = AppsAppsIndexImport.update({
  id: '/apps/',
  path: '/apps/',
  getParentRoute: () => AppsRoute,
} as any)

const SelfselfTermsRoute = SelfselfTermsImport.update({
  id: '/(self)/terms',
  path: '/terms',
  getParentRoute: () => SelfRoute,
} as any)

const SelfselfTasksRoute = SelfselfTasksImport.update({
  id: '/(self)/tasks',
  path: '/tasks',
  getParentRoute: () => SelfRoute,
} as any)

const SelfselfSignInRoute = SelfselfSignInImport.update({
  id: '/(self)/sign-in',
  path: '/sign-in',
  getParentRoute: () => SelfRoute,
} as any)

const SelfselfSettingsRoute = SelfselfSettingsImport.update({
  id: '/(self)/settings',
  path: '/settings',
  getParentRoute: () => SelfRoute,
} as any)

const SelfselfRegisterRoute = SelfselfRegisterImport.update({
  id: '/(self)/register',
  path: '/register',
  getParentRoute: () => SelfRoute,
} as any)

const SelfselfProjectsRoute = SelfselfProjectsImport.update({
  id: '/(self)/projects',
  path: '/projects',
  getParentRoute: () => SelfRoute,
} as any)

const SelfselfPrivacyRoute = SelfselfPrivacyImport.update({
  id: '/(self)/privacy',
  path: '/privacy',
  getParentRoute: () => SelfRoute,
} as any)

const DocsDocsLangIndexRoute = DocsDocsLangIndexImport.update({
  id: '/docs/$lang/',
  path: '/docs/$lang/',
  getParentRoute: () => DocsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_apps': {
      id: '/_apps'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppsImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/_docs': {
      id: '/_docs'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DocsImport
      parentRoute: typeof rootRoute
    }
    '/_self': {
      id: '/_self'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SelfImport
      parentRoute: typeof rootRoute
    }
    '/_self/(self)/privacy': {
      id: '/_self/(self)/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof SelfselfPrivacyImport
      parentRoute: typeof SelfImport
    }
    '/_self/(self)/projects': {
      id: '/_self/(self)/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof SelfselfProjectsImport
      parentRoute: typeof SelfImport
    }
    '/_self/(self)/register': {
      id: '/_self/(self)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof SelfselfRegisterImport
      parentRoute: typeof SelfImport
    }
    '/_self/(self)/settings': {
      id: '/_self/(self)/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SelfselfSettingsImport
      parentRoute: typeof SelfImport
    }
    '/_self/(self)/sign-in': {
      id: '/_self/(self)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SelfselfSignInImport
      parentRoute: typeof SelfImport
    }
    '/_self/(self)/tasks': {
      id: '/_self/(self)/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof SelfselfTasksImport
      parentRoute: typeof SelfImport
    }
    '/_self/(self)/terms': {
      id: '/_self/(self)/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof SelfselfTermsImport
      parentRoute: typeof SelfImport
    }
    '/_apps/apps/': {
      id: '/_apps/apps/'
      path: '/apps'
      fullPath: '/apps'
      preLoaderRoute: typeof AppsAppsIndexImport
      parentRoute: typeof AppsImport
    }
    '/_dashboard/dashboard/': {
      id: '/_dashboard/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardDashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/_docs/docs/': {
      id: '/_docs/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsDocsIndexImport
      parentRoute: typeof DocsImport
    }
    '/_self/(self)/': {
      id: '/_self/(self)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof SelfselfIndexImport
      parentRoute: typeof SelfImport
    }
    '/_docs/docs/$lang/': {
      id: '/_docs/docs/$lang/'
      path: '/docs/$lang'
      fullPath: '/docs/$lang'
      preLoaderRoute: typeof DocsDocsLangIndexImport
      parentRoute: typeof DocsImport
    }
  }
}

// Create and export the route tree

interface AppsRouteChildren {
  AppsAppsIndexRoute: typeof AppsAppsIndexRoute
}

const AppsRouteChildren: AppsRouteChildren = {
  AppsAppsIndexRoute: AppsAppsIndexRoute,
}

const AppsRouteWithChildren = AppsRoute._addFileChildren(AppsRouteChildren)

interface DashboardRouteChildren {
  DashboardDashboardIndexRoute: typeof DashboardDashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardDashboardIndexRoute: DashboardDashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface DocsRouteChildren {
  DocsDocsIndexRoute: typeof DocsDocsIndexRoute
  DocsDocsLangIndexRoute: typeof DocsDocsLangIndexRoute
}

const DocsRouteChildren: DocsRouteChildren = {
  DocsDocsIndexRoute: DocsDocsIndexRoute,
  DocsDocsLangIndexRoute: DocsDocsLangIndexRoute,
}

const DocsRouteWithChildren = DocsRoute._addFileChildren(DocsRouteChildren)

interface SelfRouteChildren {
  SelfselfPrivacyRoute: typeof SelfselfPrivacyRoute
  SelfselfProjectsRoute: typeof SelfselfProjectsRoute
  SelfselfRegisterRoute: typeof SelfselfRegisterRoute
  SelfselfSettingsRoute: typeof SelfselfSettingsRoute
  SelfselfSignInRoute: typeof SelfselfSignInRoute
  SelfselfTasksRoute: typeof SelfselfTasksRoute
  SelfselfTermsRoute: typeof SelfselfTermsRoute
  SelfselfIndexRoute: typeof SelfselfIndexRoute
}

const SelfRouteChildren: SelfRouteChildren = {
  SelfselfPrivacyRoute: SelfselfPrivacyRoute,
  SelfselfProjectsRoute: SelfselfProjectsRoute,
  SelfselfRegisterRoute: SelfselfRegisterRoute,
  SelfselfSettingsRoute: SelfselfSettingsRoute,
  SelfselfSignInRoute: SelfselfSignInRoute,
  SelfselfTasksRoute: SelfselfTasksRoute,
  SelfselfTermsRoute: SelfselfTermsRoute,
  SelfselfIndexRoute: SelfselfIndexRoute,
}

const SelfRouteWithChildren = SelfRoute._addFileChildren(SelfRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof SelfRouteWithChildren
  '/privacy': typeof SelfselfPrivacyRoute
  '/projects': typeof SelfselfProjectsRoute
  '/register': typeof SelfselfRegisterRoute
  '/settings': typeof SelfselfSettingsRoute
  '/sign-in': typeof SelfselfSignInRoute
  '/tasks': typeof SelfselfTasksRoute
  '/terms': typeof SelfselfTermsRoute
  '/apps': typeof AppsAppsIndexRoute
  '/dashboard': typeof DashboardDashboardIndexRoute
  '/docs': typeof DocsDocsIndexRoute
  '/': typeof SelfselfIndexRoute
  '/docs/$lang': typeof DocsDocsLangIndexRoute
}

export interface FileRoutesByTo {
  '': typeof DocsRouteWithChildren
  '/privacy': typeof SelfselfPrivacyRoute
  '/projects': typeof SelfselfProjectsRoute
  '/register': typeof SelfselfRegisterRoute
  '/settings': typeof SelfselfSettingsRoute
  '/sign-in': typeof SelfselfSignInRoute
  '/tasks': typeof SelfselfTasksRoute
  '/terms': typeof SelfselfTermsRoute
  '/apps': typeof AppsAppsIndexRoute
  '/dashboard': typeof DashboardDashboardIndexRoute
  '/docs': typeof DocsDocsIndexRoute
  '/': typeof SelfselfIndexRoute
  '/docs/$lang': typeof DocsDocsLangIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_apps': typeof AppsRouteWithChildren
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_docs': typeof DocsRouteWithChildren
  '/_self': typeof SelfRouteWithChildren
  '/_self/(self)/privacy': typeof SelfselfPrivacyRoute
  '/_self/(self)/projects': typeof SelfselfProjectsRoute
  '/_self/(self)/register': typeof SelfselfRegisterRoute
  '/_self/(self)/settings': typeof SelfselfSettingsRoute
  '/_self/(self)/sign-in': typeof SelfselfSignInRoute
  '/_self/(self)/tasks': typeof SelfselfTasksRoute
  '/_self/(self)/terms': typeof SelfselfTermsRoute
  '/_apps/apps/': typeof AppsAppsIndexRoute
  '/_dashboard/dashboard/': typeof DashboardDashboardIndexRoute
  '/_docs/docs/': typeof DocsDocsIndexRoute
  '/_self/(self)/': typeof SelfselfIndexRoute
  '/_docs/docs/$lang/': typeof DocsDocsLangIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/privacy'
    | '/projects'
    | '/register'
    | '/settings'
    | '/sign-in'
    | '/tasks'
    | '/terms'
    | '/apps'
    | '/dashboard'
    | '/docs'
    | '/'
    | '/docs/$lang'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/privacy'
    | '/projects'
    | '/register'
    | '/settings'
    | '/sign-in'
    | '/tasks'
    | '/terms'
    | '/apps'
    | '/dashboard'
    | '/docs'
    | '/'
    | '/docs/$lang'
  id:
    | '__root__'
    | '/_apps'
    | '/_dashboard'
    | '/_docs'
    | '/_self'
    | '/_self/(self)/privacy'
    | '/_self/(self)/projects'
    | '/_self/(self)/register'
    | '/_self/(self)/settings'
    | '/_self/(self)/sign-in'
    | '/_self/(self)/tasks'
    | '/_self/(self)/terms'
    | '/_apps/apps/'
    | '/_dashboard/dashboard/'
    | '/_docs/docs/'
    | '/_self/(self)/'
    | '/_docs/docs/$lang/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppsRoute: typeof AppsRouteWithChildren
  DashboardRoute: typeof DashboardRouteWithChildren
  DocsRoute: typeof DocsRouteWithChildren
  SelfRoute: typeof SelfRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppsRoute: AppsRouteWithChildren,
  DashboardRoute: DashboardRouteWithChildren,
  DocsRoute: DocsRouteWithChildren,
  SelfRoute: SelfRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_apps",
        "/_dashboard",
        "/_docs",
        "/_self"
      ]
    },
    "/_apps": {
      "filePath": "_apps.tsx",
      "children": [
        "/_apps/apps/"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard.tsx",
      "children": [
        "/_dashboard/dashboard/"
      ]
    },
    "/_docs": {
      "filePath": "_docs.tsx",
      "children": [
        "/_docs/docs/",
        "/_docs/docs/$lang/"
      ]
    },
    "/_self": {
      "filePath": "_self.tsx",
      "children": [
        "/_self/(self)/privacy",
        "/_self/(self)/projects",
        "/_self/(self)/register",
        "/_self/(self)/settings",
        "/_self/(self)/sign-in",
        "/_self/(self)/tasks",
        "/_self/(self)/terms",
        "/_self/(self)/"
      ]
    },
    "/_self/(self)/privacy": {
      "filePath": "_self/(self)/privacy.tsx",
      "parent": "/_self"
    },
    "/_self/(self)/projects": {
      "filePath": "_self/(self)/projects.tsx",
      "parent": "/_self"
    },
    "/_self/(self)/register": {
      "filePath": "_self/(self)/register.tsx",
      "parent": "/_self"
    },
    "/_self/(self)/settings": {
      "filePath": "_self/(self)/settings.tsx",
      "parent": "/_self"
    },
    "/_self/(self)/sign-in": {
      "filePath": "_self/(self)/sign-in.tsx",
      "parent": "/_self"
    },
    "/_self/(self)/tasks": {
      "filePath": "_self/(self)/tasks.tsx",
      "parent": "/_self"
    },
    "/_self/(self)/terms": {
      "filePath": "_self/(self)/terms.tsx",
      "parent": "/_self"
    },
    "/_apps/apps/": {
      "filePath": "_apps/apps/index.tsx",
      "parent": "/_apps"
    },
    "/_dashboard/dashboard/": {
      "filePath": "_dashboard/dashboard/index.tsx",
      "parent": "/_dashboard"
    },
    "/_docs/docs/": {
      "filePath": "_docs/docs/index.tsx",
      "parent": "/_docs"
    },
    "/_self/(self)/": {
      "filePath": "_self/(self)/index.tsx",
      "parent": "/_self"
    },
    "/_docs/docs/$lang/": {
      "filePath": "_docs/docs/$lang/index.tsx",
      "parent": "/_docs"
    }
  }
}
ROUTE_MANIFEST_END */
